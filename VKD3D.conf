### DO NOT CHANGE ### 
os.environ["VKD3D_CONFIG"] = ""

## VKD3D CONFIGURATION: 
## UNCOMMENT DESIRED OPTIONS BELOW

## VULKAN_DEBUG:

## Enables Vulkan debug extensions and loads validation layer.
## It may cause performance lost.

#os.environ["VKD3D_CONFIG"] += "vulkan_debug, "



## SKIP_APPLICATION_WORKAROUNDS:

## Skips all application workarounds. For debugging purposes.

#os.environ["VKD3D_CONFIG"] += "skip_application_workarounds, "



## DEBUG_UTILS:

## Enables Vulkan debug utilities, useful with vulkan_debug.
## It may cause performance lost.

#os.environ["VKD3D_CONFIG"] += "debug_utils, "



## FORCE_STATIC_CBV:

## Unsafe speed hack on NVIDIA. 
## May or may not give a significant performance uplift.

os.environ["VKD3D_CONFIG"] += "force_static_cbv, "



## DXR:

## DXR is normally enabled automatically. 
## This config forces it to be enabled even when considered unsafe.

#os.environ["VKD3D_CONFIG"] += "dxr, "



## SINGLE_QUEUE:

## Do not use asynchronous compute or transfer queues.
## May introduce some stuttering

#os.environ["VKD3D_CONFIG"] += "single_queue, "



## DESCRIPTOR_QA_CHECKS:

## If enabled, all shaders will be instrumented to check for invalid access.
## Useful for debuging

#os.environ["VKD3D_CONFIG"] += "descriptor_qa_checks, "



## NO_DXR:

## Disables DXR support.

#os.environ["VKD3D_CONFIG"] += "no_dxr, "



## FAULT:

## [GUESSING] Enables Fault managing, maybe for debug purposes

#os.environ["VKD3D_CONFIG"] += "fault, "



## FORCE_MINIMUM_SUBGROUP_SIZE:

## [GUESSING] Forces VKD3D to use a minimum subgroup size for shader invocations.
## Can improve performance

os.environ["VKD3D_CONFIG"] += "force_minimum_subgroup_size, "



## NO_UPLOAD_HVV:

## Blocks any attempt to use host-visible VRAM (large/resizable BAR) for the UPLOAD heap. 
## May free up vital VRAM in certain critical situations, at cost of lower GPU performance. 
## A fraction of VRAM is reserved for resizable BAR allocations either way, 
## so it should not be a real issue even on lower VRAM cards.

#os.environ["VKD3D_CONFIG"] += "no_upload_hvv, "



## LOG_MEMORY_BUDGET:

## [GUESSING] Enable Memory budget logs, for debuging purposes

#os.environ["VKD3D_CONFIG"] += "log_memory_budget, "



## BREADCRUMBS_SYNC:

## [GUESSING] Enable "breadcrumbs" ? markers that help track the progress of GPU commands. 
## These markers are used for debugging to determine which commands have successfully completed and where issues or hangs may have occurred.
## May degrade performance

#os.environ["VKD3D_CONFIG"] += "breadcrumbs_sync, "



## FORCE_HOST_CACHED:

## Forces all host visible allocations to be CACHED, which greatly accelerates captures.
## May improve performance

os.environ["VKD3D_CONFIG"] += "force_host_cached, "



## APP_DEBUG_MARKER_ONLY:

## [GUESSING] VKD3D will only use debug markers set by the application itself and will suppress any additional markers from VKD3D.

#os.environ["VKD3D_CONFIG"] += "app_debug_marker_only, "



## FORCE_NO_INVARIANT_POSITION:

## Avoids workarounds for invariant position. The workaround is enabled by default.
## May improve performance

os.environ["VKD3D_CONFIG"] += "force_no_invariant_position, "



## GLOBAL_PIPELINE_CACHE:

## [GUESSING] Enable a single global pipeline cache that is shared across different contexts or instances of the application. 
## This allows VKD3D to reuse pipelines more effectively, resulting in faster load times and reduced stuttering when shaders or pipeline states are reused.
## May improve performance

os.environ["VKD3D_CONFIG"] += "global_pipeline_cache, "



## PIPELINE_LIBRARY_NO_SERIALIZE_SPIRV:

## [GUESSING] Prevents the serialization of SPIR-V shaders in the pipeline library. 
## This means that the SPIR-V code will not be stored in a serialized format, which can lead to faster pipeline creation times.
## May improve performance

os.environ["VKD3D_CONFIG"] += "pipeline_library_no_serialize_spirv, "



## PIPELINE_LIBRARY_SANITIZE_SPIRV:

## [GUESSING] Performs additional checks on SPIR-V shaders to ensure they meet certain safety and correctness criteria. 
## This may involve verifying that the shaders adhere to the Vulkan specification and identifying any potential issues
## May degrade performance

#os.environ["VKD3D_CONFIG"] += "pipeline_library_sanitize_spirv, "



## PIPELINE_LIBRARY_LOG:

## [GUESSING] Enables debug logs that aims to the creation of pipeline library shaders

#os.environ["VKD3D_CONFIG"] += "pipeline_library_log, "



## PIPELINE_LIBRARY_IGNORE_SPIRV:

## [GUESSING] Ignore SPIR-V shaders when creating and managing the pipeline library. 
## Pipelines will be created without using the associated SPIR-V shaders, which can lead to different behavior or errors if shaders are required.
## May slightly improve performance

os.environ["VKD3D_CONFIG"] += "pipeline_library_ignore_spirv, "



## MUTABLE_SINGLE_SET:

## [GUESSING] Bind different resources to the same descriptor set during its lifetime. 
## This means that the resources (such as textures, buffers, etc.) bound to the descriptor set can be changed without needing to create or bind a new descriptor set.
## May slightly improve performance

os.environ["VKD3D_CONFIG"] += "mutable_single_set, "



## MEMORY_ALLOCATOR_SKIP_CLEAR:

## [GUESSING] Skip the clearing step, meaning that the allocated memory will contain whatever data was previously in that memory space. 
## This can lead to performance improvements, as the overhead of clearing memory is eliminated.

os.environ["VKD3D_CONFIG"] += "memory_allocator_skip_clear, "



## RECYCLE_COMMAND_POOLS:

## Reuse command pools whenever possible. 
## The allocator will keep a pool of unused command pools ready for reuse, minimizing the cost associated with command pool management

#os.environ["VKD3D_CONFIG"] += "recycle_command_pools, "



## PIPELINE_LIBRARY_IGNORE_MISMATCH_DRIVER:

## [GUESSING] Ignore mismatches between the pipeline library and the Vulkan driver. 
## This means that even if there are differences or unsupported states in the pipeline library compared to what the Vulkan driver expects, 
## VKD3D will proceed without issuing errors or rejecting the pipeline library.

#os.environ["VKD3D_CONFIG"] += "pipeline_library_ignore_mismatch_driver, "



## BREADCRUMBS:

## [GUESSING] Track GPU activity and detect where the GPU is encountering issues

#os.environ["VKD3D_CONFIG"] += "breadcrumbs, "



## PIPELINE_LIBRARY_APP_CACHE_ONLY:

## Alternative to VKD3D_SHADER_CACHE_PATH=0. 
## Disable cache writing, leaving the cache management to the app itself.

#os.environ["VKD3D_CONFIG"] += "pipeline_library_app_cache_only, "



## SHADER_CACHE_SYNC:

## [GUESSING] Any operations involving the shader cache (like reading, writing, or modifying shaders) are coordinated to prevent concurrent access issues. 
## This can prevent shader cache corruption or inconsistencies, especially in multi-threaded environments.
## May improve performance

os.environ["VKD3D_CONFIG"] += "shader_cache_sync, "



## FORCE_RAW_VA_CBV:

## [GUESSING]  Use raw virtual addresses when creating and using CBVs, 
## which means that the addresses will not be transformed or adjusted in any way. 
## This can provide more direct control over the memory access patterns and may be necessary for certain applications that require precise address handling.

#os.environ["VKD3D_CONFIG"] += "force_raw_va_cbv, "



## ZERO_MEMORY_WORKAROUNDS_COMMITTED_BUFFER_UAV:

## [GUESSING] Initialize to zero the memory of committed buffers before they are used as UAVs. 
## This initialization can help prevent problems related to uninitialized data in scenarios where the application or driver expects a clean memory state.

#os.environ["VKD3D_CONFIG"] += "zero_memory_workarounds_committed_buffer_uav, "



## ALLOW_SBT_COLLECTION:

## [GUESSING] Reuse existing SBTs for multiple ray tracing dispatches if their content remains unchanged, 
## reducing the overhead associated with SBT creation and setup.

#os.environ["VKD3D_CONFIG"] += "allow_sbt_collection, "



## FORCE_NATIVE_FP16:

## [GUESSING] Force the use of native FP16 precision for all applicable shader operations. 
## This means that shader variables, computations, and memory accesses that can use FP16 precision will do so, 
## assuming the underlying GPU and driver support native FP16 operations.

#os.environ["VKD3D_CONFIG"] += "force_native_fp16, "



## USE_HOST_IMPORT_FALLBACK:

## [GUESSING] Use the host import fallback mechanism to create or manage resources that need to be accessed by both the CPU and GPU.

#os.environ["VKD3D_CONFIG"] += "use_host_import_fallback, "



## PREALLOCATE_SRV_MIP_CLAMPS:

## [GUESSING] Preallocate mipmap clamp settings for SRVs, which means that the mipmap levels that can be accessed will be defined and set up ahead of time.
## May improve performance

os.environ["VKD3D_CONFIG"] += "preallocate_srv_mip_clamps, "



## FORCE_INITIAL_TRANSITION:

## [GUESSING] Force a transition of resources to a specified initial state right after their creation. 
## This guarantees that the resources are in a predictable state when first used.

#os.environ["VKD3D_CONFIG"] += "force_initial_transition, "



## FORCE_DEDICATED_IMAGE_ALLOCATION:

## [GUESSING] Force images to be allocated in dedicated memory. 
## This means that each image will have its own dedicated memory block, 
## which can lead to better performance for certain operations and can simplify resource management.

os.environ["VKD3D_CONFIG"] += "force_dedicated_image_allocation, "



## BREADCRUMBS_TRACE:

## [GUESSING] Generate trace of GPU activity and issues

#os.environ["VKD3D_CONFIG"] += "breadcrumbs_trace, "



## DISABLE_SIMULTANEOUS_UAV_COMPRESSION:

## [GUESSING] Disable simultaneous compression for UAV resources. 
## Compression operations will not occur simultaneously when multiple threads or shaders access the same UAV concurrently.
## May fix visual artifacts at cost of performance

#os.environ["VKD3D_CONFIG"] += "disable_simultaneous_uav_compression, "



## REQUIRES_COMPUTE_INDIRECT_TEMPLATES:

## [GUESSING] Require indirect compute dispatch operations to use compute templates that describes how to execute the indirect command.
## Can improve compatibility with applications that rely on this behavior in D3D12.

#os.environ["VKD3D_CONFIG"] += "requires_compute_indirect_templates, "



## SKIP_DRIVER_WORKAROUNDS:

## [GUESSING] Skip applying driver-specific workarounds. 
## This means that any compatibility patches, tweaks, or adjustments targeting known issues in specific drivers will not be applied

#os.environ["VKD3D_CONFIG"] += "skip_driver_workarounds, "



## CURB_MEMORY_PSO_CACHE:

## [GUESSING] Apply a memory limit to the PSO cache, curbing its size to avoid excessive memory usage.
## May reduce the risk of high memory consumption

os.environ["VKD3D_CONFIG"] += "curb_memory_pso_cache, "



## ENABLE_EXPERIMENTAL_FEATURES:

## [GUESSING] Activate experimental features that are otherwise disabled.

#os.environ["VKD3D_CONFIG"] += "enable_experimental_features, "



## REJECT_PADDED_SMALL_RESOURCE_ALIGNMENT:

## [GUESSING] Reject small resources that do not conform to the strict alignment criteria when padding is applied. 
## This means that if a small resource's alignment is affected by padding, VKD3D will not allow the allocation or use of such a resource, 
## ensuring stricter memory management and alignment.
## May degrade performance

#os.environ["VKD3D_CONFIG"] += "reject_padded_small_resource_alignment, "



## DISABLE_UAV_COMPRESSION:

## [GUESSING] Disables any UAV compression optimizations. 
## This means that UAV resources will not use compression mechanisms, and all data will be stored and accessed without compression. 
## Disabling UAV compression can increase memory usage and reduce bandwidth efficiency but may improve compatibility and avoid issues on certain hardware or drivers that have incomplete or buggy support for UAV compression.

#os.environ["VKD3D_CONFIG"] += "disable_uav_compression, "



## DISABLE_DEPTH_COMPRESSION:

## [GUESSING] Disable depth buffer compression for all depth resources. 
## This means that the depth data will be stored in an uncompressed format, 
## potentially increasing the amount of memory used and the bandwidth required to read and write depth data.
## May degrade performance

#os.environ["VKD3D_CONFIG"] += "disable_depth_compression, "



## DISABLE_COLOR_COMPRESSION:

## [GUESSING] Disables color buffer compression. 
## This means that all color data will be stored and accessed in an uncompressed format, which increases memory consumption and reduces bandwidth efficiency
## May fix color artifacts

#os.environ["VKD3D_CONFIG"] += "disable_color_compression, "



## DISABLE_NV_DGCC:

## [GUESSING] Disable the NVIDIA DGCC. 
## This means that any optimizations or enhancements provided by the DGCC will not be used during the execution of Vulkan commands. 

#os.environ["VKD3D_CONFIG"] += "disable_nv_dgcc, "



## MEMORY_ALLOCATOR_SKIP_IMAGE_HEAP_CLEAR:

## [GUESSING] Skip the clearing of the allocated memory for image heaps. 
## This means that the memory will not be initialized to zero, which can improve performance during allocation by avoiding the overhead associated with clearing the memory.

os.environ["VKD3D_CONFIG"] += "memory_allocator_skip_image_heap_clear, "



## DRIVER_VERSION_SENSITIVE_SHADERS:

## [GUESSING] Create shaders that may take advantage of specific features or optimizations that are available only in certain driver versions. 
## This could include using advanced features that were introduced in newer driver versions or employing techniques that work better with those versions.

#os.environ["VKD3D_CONFIG"] += "driver_version_sensitive_shaders, "



## SMALL_VRAM_REBAR:

## [GUESSING] Configure memory allocation and access strategies to better utilize the ReBAR feature on systems with small amounts of VRAM. 
## This might involve adjusting how resources are allocated or accessed to ensure that the benefits of ReBAR are fully realized, despite the limited VRAM.

#os.environ["VKD3D_CONFIG"] += "small_vram_rebar, "



## NO_STAGGERED_SUBMIT:

## [GUESSING] Disable staggered command submission. 
## This means that all commands will be submitted directly without the optimization of staggering, 
## which can simplify the submission pipeline but may impact performance in specific scenarios.

#os.environ["VKD3D_CONFIG"] += "no_staggered_submit, "



## CLEAR_UAV_SYNC:

## [GUESSING] Force synchronization when clearing UAVs. 
## This means that before clearing a UAV, VKD3D will ensure that all prior operations that may affect the UAV's content have been completed.
## May degrade performance

#os.environ["VKD3D_CONFIG"] += "clear_uav_sync, "



## FORCE_DYNAMIC_MSAA:

## [GUESSING] Use dynamic MSAA techniques, allowing for adjustments to the MSAA sample count during rendering. 
## This can lead to better performance in scenarios where high-quality rendering is needed but may not be sustainable at all times.

os.environ["VKD3D_CONFIG"] += "force_dynamic_msaa, "



## INSTRUCTION_QA_CHECKS:

## [GUESSING] Perform additional validation checks on the instructions issued to the Vulkan driver. 
## This may include checking for proper usage of resources, verifying that instructions conform to expected formats, and ensuring that no illegal operations are performed.
## May degrade performance

#os.environ["VKD3D_CONFIG"] += "instruction_qa_checks, "

# VKD3D Configuration Environment Variables
# 
# This section of the code modifies the VKD3D_CONFIG environment variable
# by appending various configuration options for the VKD3D renderer.
#
# Configuration Options:
# - PLACED_TEXTURE_ALIASING: Enables aliasing for placed textures.
# - RETAIN_PSOS: Retains pipeline state objects.
# - DISABLE_DGCC: Disables the DirectX Graphics Compiler.
# - TRANSFER_QUEUE: Enables the use of a transfer queue.
# - NO_GPU_UPLOAD_HEAP: Disables the GPU upload heap.
# - ONE_TIME_SUBMIT: Allows for one-time submission of commands.
# - SKIP_NULL_SPARSE_TILES: Skips null sparse tiles during processing.
# - QUEUE_PROFILE_EXTRA: Provides extra profiling for the queue.
# - DAMAGE_NOT_ZEROED_ALLOCATIONS: Handles allocations that are not zeroed.

os.environ["VKD3D_CONFIG"] += "placed_texture_aliasing, "
os.environ["VKD3D_CONFIG"] += "retain_psos, "
os.environ["VKD3D_CONFIG"] += "disable_dgcc, "
os.environ["VKD3D_CONFIG"] += "transfer_queue, "
os.environ["VKD3D_CONFIG"] += "no_gpu_upload_heap, "
os.environ["VKD3D_CONFIG"] += "one_time_submit, "
os.environ["VKD3D_CONFIG"] += "skip_null_sparse_tiles, "
os.environ["VKD3D_CONFIG"] += "queue_profile_extra, "
os.environ["VKD3D_CONFIG"] += "damage_not_zeroed_allocations, "


### DO NOT CHANGE ### 
os.environ["VKD3D_CONFIG"] = os.environ["VKD3D_CONFIG"][:-2]






